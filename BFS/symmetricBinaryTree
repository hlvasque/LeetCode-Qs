/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //LeetCode Q: 101. Symmetric Tree
 
 /* DESCRIPTION
 Given the root of a binary tree, check whether it is a mirror of itself 
 (i.e., symmetric around its center).
 
 */
 
class Solution {
public:
    bool recurseBinaryTree( TreeNode* left, TreeNode* right ){
        if( left == nullptr && right == nullptr ) return true; 
        if( left == nullptr && right != nullptr ) return false; 
        if( left != nullptr && right == nullptr ) return false; 
        if( left->val != right->val ) return false; 
        return true && recurseBinaryTree( left->left, right->right ) && recurseBinaryTree( left->right, right->left ); 

    }
    bool isSymmetric(TreeNode* root) {
        if( root == nullptr ) return true; 
        return recurseBinaryTree( root->left, root->right ); 
        
    }
};
