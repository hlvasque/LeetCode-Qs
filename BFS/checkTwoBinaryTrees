/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //LeetCode Q: 100. Same Tree (BFS Approach)

/*
DESCRIPTION: 
Given the roots of two binary trees p and q, 
write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, 
and the nodes have the same value.

*/
 
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        queue<TreeNode*> q1; 
        queue<TreeNode*> q2; 
        q1.push( p );
        q2.push( q ); 
        while( q1.size() > 0 && q2.size() > 0 ){
            if( q1.front() != nullptr && q2.front() != nullptr ){
                if( q1.front()->val != q2.front()->val ) return false; 
                q1.push( q1.front()->left ); 
                q1.push( q1.front()->right ); 
                q2.push( q2.front()->left ); 
                q2.push( q2.front()->right ); 
            }
            else if( q1.front() == nullptr && q2.front() != nullptr || q1.front() != nullptr && q2.front() == nullptr ) return false; 
            q1.pop(); 
            q2.pop(); 
        }
        if( q1.size() > 0 || q2.size() > 0 ) return false; 
        return true; 
    }
};
