/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //LeetCode Q: 107. Binary Tree Level Order Traversal II

/*
Description: Given the root of a binary tree, 
return the bottom-up level order traversal of its nodes' values. 
(i.e., from left to right, level by level from leaf to root).

*/
 
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        queue<TreeNode*> temp1; 
        stack<vector<int>> stack1; 

        temp1.push( root ); 
        while( temp1.size() > 0 ){
            int mSize = temp1.size(); 
            vector<int> innerVec; 
            for( int i = 0; i < mSize; i ++ ){
                if( temp1.front() != nullptr ){
                    innerVec.push_back( temp1.front()->val ); 
                    temp1.push( temp1.front()->left ); 
                    temp1.push( temp1.front()->right ); 
                }
                temp1.pop(); 
            }
            if( innerVec.size() > 0 ) stack1.push( innerVec ); 
        }
        vector<vector<int>> finalVec; 
        while( stack1.size() > 0 ){
            finalVec.push_back( stack1.top() ); 
            stack1.pop(); 
        }
        return finalVec; 
    }
};
