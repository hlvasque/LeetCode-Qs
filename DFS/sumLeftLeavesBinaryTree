/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //LeetCode Q: 404. Sum of Left Leaves

/*
DESCRIPTION: Given the root of a binary tree, return the sum of all left leaves.

A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.


*/
 
class Solution {
public:
    int sumLeaves( TreeNode* root ){
        if( root == nullptr ) return 0; 
        //if we're at a leaf node return 0 
       if( root->left == nullptr && root->right == nullptr ) return 0;
       if( root->left == nullptr ) return sumLeaves( root->right );  
        //if our next node is a leaf 
        else if( root->left->left == nullptr && root->left->right == nullptr ){
            return root->left->val + sumLeaves( root->right ); 
        }
        else return sumLeaves( root->left ) + sumLeaves( root->right ); 
    }
    int sumOfLeftLeaves(TreeNode* root) {
        return sumLeaves( root ); 
    }
};
